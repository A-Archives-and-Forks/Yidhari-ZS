// Code generated by protoc-gen-zig
///! package nap_action
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
const ManagedStruct = protobuf.ManagedStruct;
const json = protobuf.json;
const UnionDecodingError = protobuf.UnionDecodingError;

pub const ActionOpenUi = struct {
    ui: ManagedString = .Empty,
    args: i32 = 0,
    store_template_id: i32 = 0,
    npc_id: i32 = 0,

    pub const _desc_table = .{
        .ui = fd(1, null, .String),
        .args = fd(2, null, .{ .Varint = .Simple }),
        .store_template_id = fd(4, null, .{ .Varint = .Simple }),
        .npc_id = fd(5, null, .{ .Varint = .Simple }),
    };

    pub fn encode(self: @This(), writer: *std.Io.Writer) std.Io.Writer.Error!void {
        return protobuf.encodeMessage(self, writer);
    }
    pub fn encodingLength(self: @This()) usize {
        return protobuf.messageEncodingLength(self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.decodeMessage(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.initMessage(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: Allocator) void {
        return protobuf.deinitializeMessage(self, allocator);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.dupeMessage(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.deserializeMessage(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.serializeMessage(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.parseMessageFromJson(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.stringifyMessageAsJson(@This(), self, jws);
    }
};

pub const ActionSwitchSection = struct {
    section_id: u32 = 0,
    transform_id: ManagedString = .Empty,
    camera_x: u32 = 0,
    camera_y: u32 = 0,

    pub const _desc_table = .{
        .section_id = fd(1, null, .{ .Varint = .Simple }),
        .transform_id = fd(2, null, .String),
        .camera_x = fd(3, null, .{ .Varint = .Simple }),
        .camera_y = fd(4, null, .{ .Varint = .Simple }),
    };

    pub fn encode(self: @This(), writer: *std.Io.Writer) std.Io.Writer.Error!void {
        return protobuf.encodeMessage(self, writer);
    }
    pub fn encodingLength(self: @This()) usize {
        return protobuf.messageEncodingLength(self);
    }
    pub fn decode(input: []const u8, allocator: Allocator) UnionDecodingError!@This() {
        return protobuf.decodeMessage(@This(), input, allocator);
    }
    pub fn init(allocator: Allocator) @This() {
        return protobuf.initMessage(@This(), allocator);
    }
    pub fn deinit(self: @This(), allocator: Allocator) void {
        return protobuf.deinitializeMessage(self, allocator);
    }
    pub fn dupe(self: @This(), allocator: Allocator) Allocator.Error!@This() {
        return protobuf.dupeMessage(@This(), self, allocator);
    }
    pub fn json_decode(
        input: []const u8,
        options: json.ParseOptions,
        allocator: Allocator,
    ) !std.json.Parsed(@This()) {
        return protobuf.deserializeMessage(@This(), input, options, allocator);
    }
    pub fn json_encode(
        self: @This(),
        options: json.StringifyOptions,
        allocator: Allocator,
    ) ![]const u8 {
        return protobuf.serializeMessage(self, options, allocator);
    }

    // This method is used by std.json
    // internally for deserialization. DO NOT RENAME!
    pub fn jsonParse(
        allocator: Allocator,
        source: anytype,
        options: json.ParseOptions,
    ) !@This() {
        return protobuf.parseMessageFromJson(@This(), allocator, source, options);
    }

    // This method is used by std.json
    // internally for serialization. DO NOT RENAME!
    pub fn jsonStringify(self: *const @This(), jws: anytype) !void {
        return protobuf.stringifyMessageAsJson(@This(), self, jws);
    }
};
